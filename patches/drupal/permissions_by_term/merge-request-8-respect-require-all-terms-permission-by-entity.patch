From b99848693970a2a4ef2ec986fa2989449d8f6a86 Mon Sep 17 00:00:00 2001
From: Matei Stanca <i@ambientimpact.com>
Date: Sat, 4 Sep 2021 09:24:29 -0400
Subject: [PATCH] Permissions by Entity: respect require all/permission mode
 settings.

---
 .../permissions_by_entity.services.yml        |  1 +
 .../src/Service/AccessChecker.php             | 52 ++++++++++++++++---
 2 files changed, 46 insertions(+), 7 deletions(-)

diff --git a/modules/permissions_by_entity/permissions_by_entity.services.yml b/modules/permissions_by_entity/permissions_by_entity.services.yml
index ef32285..54eec8c 100644
--- a/modules/permissions_by_entity/permissions_by_entity.services.yml
+++ b/modules/permissions_by_entity/permissions_by_entity.services.yml
@@ -5,6 +5,7 @@ services:
   permissions_by_entity.access_checker:
     class: Drupal\permissions_by_entity\Service\AccessChecker
     arguments:
+      - '@config.factory'
       - '@event_dispatcher'
       - '@permissions_by_entity.checked_entity_cache'
       - '@entity_field.manager'
diff --git a/modules/permissions_by_entity/src/Service/AccessChecker.php b/modules/permissions_by_entity/src/Service/AccessChecker.php
index 021d1f3..faaab44 100644
--- a/modules/permissions_by_entity/src/Service/AccessChecker.php
+++ b/modules/permissions_by_entity/src/Service/AccessChecker.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\permissions_by_entity\Service;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
@@ -32,6 +33,13 @@ class AccessChecker extends AccessCheck implements AccessCheckerInterface {
    */
   private $checkedEntityCache;
 
+  /**
+   * The Permissions by Term configuration.
+   *
+   * @var \Drupal\Core\Config\ImmutableConfig
+   */
+  private $config;
+
   /**
    * The entity field value access denied event.
    *
@@ -40,6 +48,7 @@ class AccessChecker extends AccessCheck implements AccessCheckerInterface {
   private $event;
 
   public function __construct(
+    ConfigFactoryInterface $configFactory,
     EventDispatcherInterface $event_dispatcher,
     CheckedEntityCache $checked_entity_cache,
     EntityFieldManagerInterface $entityFieldManager,
@@ -49,6 +58,7 @@ class AccessChecker extends AccessCheck implements AccessCheckerInterface {
     $this->eventDispatcher = $event_dispatcher;
     $this->checkedEntityCache = $checked_entity_cache;
 
+    $this->config = $configFactory->get('permissions_by_term.settings');
     $this->event = new EntityFieldValueAccessDeniedEvent();
   }
 
@@ -56,6 +66,19 @@ class AccessChecker extends AccessCheck implements AccessCheckerInterface {
    * {@inheritdoc}
    */
   public function isAccessAllowed(FieldableEntityInterface $entity, $uid = FALSE): bool {
+
+    $configPermissionMode = $this->config->get('permission_mode');
+
+    $requireAllTermsGranted = $this->config->get('require_all_terms_granted');
+
+    $empty_terms = TRUE;
+
+    if (!$configPermissionMode && (!$requireAllTermsGranted)) {
+      $access_allowed = TRUE;
+    } else {
+      $access_allowed = FALSE;
+    }
+
     // Iterate over the fields the entity contains.
     foreach ($entity->getFields() as $field) {
 
@@ -69,15 +92,30 @@ class AccessChecker extends AccessCheck implements AccessCheckerInterface {
         // Iterate over each referenced taxonomy term.
         /** @var \Drupal\Core\Field\FieldItemInterface $item */
         foreach ($field->getValue() as $item) {
-          // Let "Permissions By Term" do the actual check.
-          if (
-            !empty($item['target_id']) &&
-            !$this->isAccessAllowedByDatabase($item['target_id'], $uid, $entity->language()->getId())
-          ) {
-            // Return that the user is not allowed to access this entity.
-            return FALSE;
+
+          if (!empty($item['target_id'])) {
+
+            $empty_terms = FALSE;
+
+            // Let "Permissions By Term" do the actual check.
+            $access_allowed = $this->isAccessAllowedByDatabase($item['target_id'], $uid, $entity->language()->getId());
+
+            if (!$access_allowed && $requireAllTermsGranted) {
+              return $access_allowed;
+            }
+
+            if ($access_allowed && !$requireAllTermsGranted) {
+              return $access_allowed;
+            }
           }
         }
+
+        if ($empty_terms && $configPermissionMode) {
+          return FALSE;
+        }
+        else {
+          return $access_allowed;
+        }
       }
 
       // Check if the field contains another fieldable entity,
-- 
GitLab

